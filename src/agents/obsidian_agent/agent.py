"""Agent module."""

import logfire
from dotenv import load_dotenv
from pydantic_ai import Agent, RunContext
from pydantic import BaseModel
from a2a.types import AgentSkill
from src.agents.common.agent import load_agent_config
from src.agents.tools.github_tools import (
    delete_note_from_github,
    get_github_file_contents,
    get_github_folder_contents,
    print_folder_tree,
    send_new_content_to_github,
)

load_dotenv(override=True)

obsidian_agent_config = load_agent_config("src/agents/obsidian_agent/config.yml")


class ObsidianAgentCard(BaseModel):
    """
    This agent is used to manage the Obsidian vault.
    """

    name: str = obsidian_agent_config.name
    description: str = obsidian_agent_config.description
    skills: list[AgentSkill] = []
    organization: str = obsidian_agent_config.name
    url: str = obsidian_agent_config.endpoint


obsidian_agent = Agent(
    model=obsidian_agent_config.model,
    mcp_servers=[],
    name=obsidian_agent_config.name,
    system_prompt=obsidian_agent_config.system_prompt,
)


async def run_obsidian_agent(task: str) -> str:
    """
    Run the Obsidian Agent asynchronously on a given task and return the agent's output string.

    Parameters:
        task (str): The instruction or task for the agent to process.

    Returns:
        str: The output generated by the agent for the specified task.
    """
    async with obsidian_agent.run_mcp_servers():
        result = await obsidian_agent.run(
            task,
        )
        return result.output


@obsidian_agent.tool
def list_folder_tree(
    ctx: RunContext,
    folder: str = "meetings",
    owner: str = "connorbell133",
    repo: str = "obsidian",
) -> dict:
    """
    Retrieves and returns the folder tree structure of a specified folder in a GitHub repository.

    Parameters:
        folder (str): The path of the folder within the repository to list. Defaults to "meetings".
        owner (str): The GitHub username or organization that owns the repository. Defaults to "connorbell133".
        repo (str): The name of the GitHub repository. Defaults to "obsidian".

    Returns:
        dict: A dictionary indicating success and containing either the folder tree as a string or an error message if retrieval fails or the GitHub token is not set.
    """
    # Make sure to set your GITHUB_TOKEN environment variable
    if ctx.deps.GITHUB_TOKEN:
        logfire.debug(f"Listing contents of '{folder}' in '{owner}/{repo}':")
        repo_tree = get_github_folder_contents(owner, repo, folder)

        if repo_tree:
            return {
                "success": True,
                "folder_tree": print_folder_tree(repo_tree),
            }
        return {
            "success": False,
            "error": "Could not retrieve folder tree.",
        }

    return {
        "success": False,
        "error": "GITHUB_TOKEN environment variable not set. Please set it before running.",
    }


@obsidian_agent.tool
def create_note(
    ctx: RunContext,
    note_path: str,
    content: str,
    owner: str = "connorbell133",
    repo: str = "obsidian",
) -> dict:
    """
    Create a new note in the specified GitHub repository at the given path with the provided content.

    Parameters:
        note_path (str): The path where the new note will be created within the repository.
        content (str): The content to write into the new note.

    Returns:
        dict: The response from the GitHub content creation operation.
    """
    # create the note
    response = send_new_content_to_github(note_path, content, owner, repo)

    return response


@obsidian_agent.tool
def read_note(
    ctx: RunContext,
    note_path: str,
    owner: str = "connorbell133",
    repo: str = "obsidian",
) -> dict:
    """
    Retrieve the content of a specified note file from a GitHub repository.

    Parameters:
        note_path (str): The path to the note file within the repository.

    Returns:
        dict: A dictionary containing the note content or error information.
    """
    return get_github_file_contents(owner, repo, note_path)


@obsidian_agent.tool
def update_note(
    ctx: RunContext,
    note_path: str,
    content: str,
    owner: str = "connorbell133",
    repo: str = "obsidian",
) -> dict:
    """
    Appends new content to an existing note in the specified GitHub repository.

    If the note cannot be read, returns the failure response from the read operation. Otherwise, appends the provided content to the current note and updates the file in the repository.

    Returns:
        dict: The response from the update operation, indicating success or failure.
    """
    # get the note content
    note_content = read_note(note_path, owner, repo)
    if not note_content["success"]:
        return note_content

    # update the note content
    new_content = {
        "success": True,
        "file_contents": note_content["file_contents"] + content,
    }

    # send new content to github
    response = send_new_content_to_github(
        note_path, new_content["file_contents"], owner, repo
    )

    return response


@obsidian_agent.tool
def delete_note(
    ctx: RunContext,
    note_path: str,
    owner: str = "connorbell133",
    repo: str = "obsidian",
) -> dict:
    """
    Deletes a specified note from the given GitHub repository.

    Parameters:
        note_path (str): Path to the note file to be deleted.

    Returns:
        dict: Result of the deletion operation, including success status and any relevant messages.
    """
    return delete_note_from_github(note_path, owner, repo)


app = obsidian_agent.to_a2a()
